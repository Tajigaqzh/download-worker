"use strict";importScripts("download-utils.worker.js"),importScripts("./lib/jszip.min.js"),function(){class s{#s=null;#t={maxConcurrent:10,maxRetries:3,waitTime:1e3,tableName:"",statusTableName:""};#a=null;tasks=[];activeDownloadsMap=null;errorTasks=[];pausedTasks=null;constructor(s,t,a){this.#s=s,t&&(this.#a=t),a&&(console.log(a,"配置"),this.#t={...this.#t,...a}),this.activeDownloadsMap=new Map,this.pausedTasks=new Map}async addDBCache(s){if(this.#s&&this.#t.tableName&&s&&(console.log(s),console.log("我被调用了"),s&&(s.forEach((s=>{s.taskTimeStamp=(new Date).getTime()})),await this.#s.putAll(this.#t.tableName,s))),this.#s&&this.#t.statusTableName&&s){const t=s.map((s=>({taskId:s.taskId,status:s.status})));await this.#s.putAll(this.#t.statusTableName,t)}return Promise.resolve(null)}async removeDBCache(s){}async changeDBCache(s,t={changeStatus:!1}){if(this.#s&&this.#t.tableName){const a=await this.#s.put(this.#t.tableName,s);if(a){if(t.changeStatus){const t=await this.changeCacheStatus(s.taskId,s.status);return t?Promise.resolve(t):Promise.reject(null)}return Promise.resolve(a)}return Promise.resolve(null)}return Promise.resolve(null)}async changeCacheStatus(s,t){if(this.#s&&this.#t.statusTableName){const a=await this.#s.put(this.#t.statusTableName,{taskId:s,status:t});return a?Promise.resolve(a):Promise.resolve(null)}return Promise.resolve(null)}async getDBCacheByTaskId(s){if(this.#s&&this.#t.tableName){const t=await this.#s.get(this.#t.tableName,s);return t?Promise.resolve(t):Promise.resolve(null)}return Promise.resolve(null)}async getDBCacheStatusByTaskId(s){if(this.#s&&this.#t.statusTableName){const t=await this.#s.get(this.#t.statusTableName,s);return t?Promise.resolve(t):Promise.resolve(null)}return Promise.resolve(null)}async getDBCacheByBatchId(s,t){}async getDBCacheByUserId(){}async wait(s=0){const t=s||(this.#t.waitTime?this.#t.waitTime:1e3);return new Promise((s=>setTimeout(s,t)))}getConfig(){return this.#t}async pauseTask(s){if(this.activeDownloadsMap.has(s)){console.log("有任务");await this.getDBCacheByTaskId(s)&&await this.changeCacheStatus(s,DOWNLOAD_STATUS.PAUSE_DOWNLOAD)}else console.log("当前下载的任务没有")}async batchPauseTask(s=[]){for(let t=0;t<s.length;t++);}async resumeTask(s){const t=await this.getDBCacheByTaskId(s);if(t)if(t.status=DOWNLOAD_STATUS.RESUME_DOWNLOAD,await this.changeDBCache(t,{changeStatus:!0}),this.activeDownloadsMap.size>0)this.tasks.push(t);else{const s=this.getConfig(),a=async()=>{await this.downloadWithRetry(t,s)},e=Array(1).fill(null).map((()=>a()));await Promise.all(e)}}async batchResumeTask(s=[]){}async cleatPendingTasks(){this.tasks=[]}async cancelTask(s){if(this.activeDownloadsMap.has(s)){const t=this.activeDownloadsMap.get(s);t?.abort(),this.activeDownloadsMap.delete(s)}}async batchCancelTask(s=[]){}async downloadWithRetry(s,t){let a=0;const e=new AbortController;console.log(this.activeDownloadsMap),this.activeDownloadsMap.set(s.taskId,e);const{maxRetries:i,waitTime:o}=t;let n,l=!1,c=!1,r=null;for(;a<i&&!l&&!c;)try{if(n=await this.getDBCacheByTaskId(s.taskId),n){await this.downloadFile(n);l=!0,this.activeDownloadsMap.delete(s.taskId)}else r="没有缓存",this.activeDownloadsMap.delete(s.taskId),c=!0}catch(t){if(console.log("错误",t),a>i)return this.activeDownloadsMap.delete(s.taskId),n.status=DOWNLOAD_STATUS.FAIL_DOWNLOAD,Promise.resolve(n);n.status=DOWNLOAD_STATUS.FAIL_DOWNLOAD_RETRY;const e=s.waitTime??o;await this.changeDBCache(n),await this.wait(e),a++}}async beforeDownload(s){if(!s.taskId)return this.callback({type:"error",message:"参数错误"}),Promise.resolve(null);if(!isValidUrl(s.url))return this.callback({type:"error",message:"URL不合法"}),Promise.resolve(null);s.status=DOWNLOAD_STATUS.DOWNLOADING,s.startTimestamp=(new Date).getTime();try{return await this.changeDBCache(s,{changeStatus:!0})?Promise.resolve(s):(this.callback({type:"error",message:"数据库更新失败"}),Promise.resolve(null))}catch(s){return this.callback({type:"error",message:"数据库更新失败"}),Promise.resolve(null)}}async afterDownload(){}async processCancelTask(){}async processResponsePlus(s,t,a=!1){if(!s.ok&&206!==s.status)return console.log("错误"),Promise.reject();let e=parseInt(s.headers.get("Content-Length"));const i=s.headers.get("Content-Type")||"application/octet-stream";let o=await this.getDBCacheByTaskId(t.taskId);a&&o.totalSize&&(e=o.totalSize),o={...o,totalSize:e,downloaded:o?.downloaded||0,chunks:o?.chunks||[],progress:o?.progress||0};const n=s.body.getReader();let l=Date.now(),c=Date.now(),r=!1;try{for(;;){if(Date.now()-c>=1e3){const{status:s}=await this.getDBCacheStatusByTaskId(t.taskId);if(console.log("当前状态",s),s===DOWNLOAD_STATUS.PAUSE_DOWNLOAD)return await n.cancel(),o.status=DOWNLOAD_STATUS.PAUSE_DOWNLOAD,console.log(o,"暂停下载"),await this.saveToCache(o),this.activeDownloadsMap.delete(o.taskId),console.log("下载已暂停"),null;s===DOWNLOAD_STATUS.RESUME_DOWNLOAD&&(o.status=DOWNLOAD_STATUS.DOWNLOADING,await this.changeDBCache(o,{changeStatus:!0}),o.chunks=[]),c=Date.now()}const{done:s,value:a}=await n.read();if(s)break;o.downloaded+=a.length,o.chunks.push(a),o.progress=e?Math.min(99,Math.round(o.downloaded/e*100)):0,this.callback({type:"file-progress",fileId:t.taskId,progress:o.progress,downloaded:o.downloaded,total:e}),Date.now()-l>=5e3&&(await this.saveToCache(o),l=Date.now())}r=!0,o.progress=100,o.status=DOWNLOAD_STATUS.COMPLETE_DOWNLOAD,o.endTimestamp=Date.now(),await this.saveToCache(o)}catch(s){if("RESTART_DOWNLOAD"===s.message)throw s;throw console.error("下载出错:",s),s}const h=await this.mergeChunks(o,i,!0);this.activeDownloadsMap.delete(o.taskId),this.callback({type:"complete",fileId:t.taskId,blob:h.blob,totalSize:h.totalSize,downloaded:h.downloaded,progress:100,startTimestamp:o.startTimestamp,endTimestamp:o.endTimestamp,status:DOWNLOAD_STATUS.COMPLETE_DOWNLOAD}),console.log(h)}async mergeChunks(s,t,a=!1){const e=await this.getDBCacheByTaskId(s.taskId);if(!e)return null;const i=[...e.chunks||[],...s.chunks],o=new Blob(i,{type:t});return s.chunks=[],s.blob=o,a&&await this.changeDBCache(s,{changeStatus:!0}),s}async saveToCache(s){const t=await this.getDBCacheByTaskId(s.taskId)||{},a={...t,...s,chunks:[...t.chunks||[],...s.chunks],blob:null,lastUpdated:Date.now()};await this.changeDBCache(a),s.chunks=[]}async downloadFile(s){console.log("开始前");try{if(this.activeDownloadsMap.has(s.taskId)){const t=this.activeDownloadsMap.get(s.taskId);let a;const e=s.status===DOWNLOAD_STATUS.RESUME_DOWNLOAD;if(e){let e="";s.downloaded>0&&(e=`bytes = ${s.downloaded+1} -`),a=await fetch(s.url,{signal:t.signal,headers:{Range:e}})}else a=await fetch(s.url,{signal:t.signal});if(a){const t=await this.processResponsePlus(a,s,e);console.log(t)}}else console.log("没有任务")}catch(s){console.log(s)}}callback(s){this.#a&&this.#a(s)}}self.ListDownLoaderController=class extends s{constructor(s,t,a){super(s,t,a)}async process(s=[],t={isResume:!1,isHasNew:!1}){t.isHasNew||(await this.addDBCache(s.taskList),this.tasks.push(...s.taskList));const a=this.getConfig(),e=async()=>{for(;this.tasks.length>0;){const s=this.tasks.shift();let t;if(s.status===DOWNLOAD_STATUS.PENDING?t=await this.beforeDownload(s):s.status===DOWNLOAD_STATUS.RESUME_DOWNLOAD&&(t=s),t){await this.downloadWithRetry(t,a)}}},i=Array(Math.min(a.maxConcurrent,this.tasks.length)).fill(null).map((()=>e()));await Promise.all(i),this.tasks.length>0&&await this.process([],{isHasNew:!0})}},self.ZipDownLoaderController=class extends s{zipTask=new Map;constructor(s,t,a){super(s,t,a)}async process(s){if(console.log(this.tasks,"zip任务队列"),!s.taskList||0===s.taskList.length)return;this.addZipTask(s.taskList),await this.addDBCache(s.taskList),this.tasks.push(...s.taskList);this.getConfig()}addZipTask(s){const t=s[0],a=[];s.forEach((s=>{a.push({taskId:s.taskId,status:0,message:""})})),this.zipTask.set(t,{tasks:a,userId:s[0].userId,isComplete:!1})}changeCurrentTaskStatus(s,t,a,e){const i=this.zipTask.get(s);if(i){const e=i.tasks.findIndex((s=>s.taskId===t));if(-1!==e){const t=i.tasks[e];i.tasks.splice(e,1,{...t,status:a});const o=i.isisComplete=i.tasks.filter((s=>0!==s.status)).length===i.tasks.length;if(this.zipTask.set(s,i),o){this.compress(s,i.userId)}}}}async compress(s,t){await this.getDBCacheByBatchId(s,t)}}}();